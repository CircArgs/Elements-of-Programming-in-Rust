var searchIndex = JSON.parse('{\
"Elements_of_Programming_in_Rust":{"doc":"","i":[[0,"problem_4_1","Elements_of_Programming_in_Rust","EoPI pg 24 The parity of a binary word is 1 if the number…",null,null],[3,"StringSolution","Elements_of_Programming_in_Rust::problem_4_1","a naive solution using strings",null,null],[3,"Solution1","","recursively compute the parity of right shifted subwords…",null,null],[3,"Solution2","","iteratively fold a word in half `XOR`\'ing all the way NO…",null,null],[12,"n_bits","","",0,null],[3,"Solution3","","iteratively fold a word in half `XOR`\'ing all the way YES…",null,null],[12,"n_bits","","K determins the maximum size of the hashmap e.g. u16 will…",1,null],[12,"map","","",1,null],[12,"_phantom","","",1,null],[12,"_helper","","",1,null],[5,"n_bits","","A helper function for getting the number of bits of a type…",null,[[]]],[8,"Parity","","Fundamental Trait we will be implementing in this problem.",null,null],[10,"parity","","",2,[[]]],[11,"new","","",3,[[]]],[11,"new","","",4,[[]]],[11,"new","","",0,[[]]],[11,"new","","",1,[[]]],[0,"problem_5_1","Elements_of_Programming_in_Rust","EOPI pg 39. The Dutch National Flag Problem Write a…",null,null],[5,"flag_sort_naive","Elements_of_Programming_in_Rust::problem_5_1","the solution keeps track of two pivot points to know the…",null,[[]]],[5,"flag_sort","","sorts a slice of elements implementing Ord iterates…",null,[[]]],[0,"problem_5_6","Elements_of_Programming_in_Rust","EoPI pg 46 Buy and sell a stock once This problem is…",null,null],[5,"buy_sell","Elements_of_Programming_in_Rust::problem_5_6","the primary solution takes a slice `&[T]` and returns a T…",null,[[]]],[0,"problem_6_1","Elements_of_Programming_in_Rust","EoPI pg 68 Interconvert Strings and Integers In this…",null,null],[5,"string_to_integer","Elements_of_Programming_in_Rust::problem_6_1","String to Integer Will only go to i64 for convenience here",null,[[]]],[5,"int_to_string","","Integer to String will use i64 for convenience",null,[[],["string",3]]],[0,"problem_7_1","Elements_of_Programming_in_Rust","7.1 Merge two sorted lists Consider two singly linked…",null,null],[5,"merge_sorted_lists","Elements_of_Programming_in_Rust::problem_7_1","two lists of items that are orderable and clonable (could…",null,[[["linkedlist",3]],[["clone",8],["linkedlist",3],["ord",8]]]],[0,"problem_8_1","Elements_of_Programming_in_Rust","8.1 Implement a stack with a max api Design a stack that…",null,null],[3,"MaxStack","Elements_of_Programming_in_Rust::problem_8_1","",null,null],[12,"stack","","",5,null],[12,"max_stack","","",5,null],[11,"new","","",5,[[]]],[11,"push","","",5,[[]]],[11,"max","","",5,[[],[["rc",3],["option",4]]]],[11,"pop","","",5,[[],[["rc",3],["option",4]]]],[0,"utils","Elements_of_Programming_in_Rust","",null,null],[0,"binary_tree","Elements_of_Programming_in_Rust::utils","",null,null],[3,"TreeNode","Elements_of_Programming_in_Rust::utils::binary_tree","",null,null],[12,"left","","",6,null],[12,"right","","",6,null],[12,"data","","",6,null],[3,"BinaryTree","","",null,null],[12,"root","","",7,null],[3,"InorderTraversal","","",null,null],[12,"parent","","",8,null],[12,"rel","","",8,null],[4,"NodeRelation","","",null,null],[13,"Parent","","",9,null],[13,"Left","","",9,null],[13,"Right","","",9,null],[6,"Node","","",null,null],[11,"new","","",6,[[]]],[11,"is_leaf","","",6,[[]]],[11,"insert","","",6,[[]]],[11,"new","","",7,[[]]],[11,"insert","","",7,[[]]],[11,"inorder_iter","","",7,[[],["inordertraversal",3]]],[0,"linked_list","Elements_of_Programming_in_Rust::utils","",null,null],[0,"rclist","Elements_of_Programming_in_Rust::utils::linked_list","based on…",null,null],[3,"List","Elements_of_Programming_in_Rust::utils::linked_list::rclist","",null,null],[12,"head","","",10,null],[3,"Node","","",null,null],[12,"elem","","",11,null],[12,"next","","",11,null],[3,"Iter","","",null,null],[12,"next","","",12,null],[3,"IterMut","","",null,null],[12,"next","","",13,null],[6,"LinkValue","","",null,null],[6,"Link","","",null,null],[11,"new","","",10,[[]]],[11,"push_mut","","pushes an element onto the front of the list mutating it…",10,[[]]],[11,"push","","pushes an element onto the front of the list and returns a…",10,[[]]],[11,"tail","","",10,[[]]],[11,"head","","",10,[[],[["option",4],["ref",3]]]],[11,"iter","","",10,[[],[["from",8],["list",3]]]],[0,"smart_pointers","Elements_of_Programming_in_Rust::utils","based on Jon Gjengset",null,null],[0,"cell","Elements_of_Programming_in_Rust::utils::smart_pointers","`Cell` is used for interior mutability of types that are…",null,null],[3,"Cell","Elements_of_Programming_in_Rust::utils::smart_pointers::cell","",null,null],[12,"value","","",14,null],[11,"new","","",14,[[]]],[11,"set","","",14,[[]]],[11,"get","","",14,[[]]],[0,"rc","Elements_of_Programming_in_Rust::utils::smart_pointers","`Rc` is a type that implements reference counting at…",null,null],[3,"RcInner","Elements_of_Programming_in_Rust::utils::smart_pointers::rc","`RcInner` is what an `Rc` actually stores a reference to.…",null,null],[12,"value","","",15,null],[12,"refcount","","",15,null],[3,"Rc","","the actual `Rc` object",null,null],[12,"inner","","",16,null],[12,"_marker","","",16,null],[11,"new","","",16,[[]]],[0,"refcell","Elements_of_Programming_in_Rust::utils::smart_pointers","`RefCell` is a type that provides interior mutability at…",null,null],[3,"RefCell","Elements_of_Programming_in_Rust::utils::smart_pointers::refcell","The Refcell itself",null,null],[12,"value","","",17,null],[12,"_flag","","",17,null],[3,"Ref","","the `Ref` object that will be used to return references…",null,null],[12,"refcell","","",18,null],[3,"RefMut","","`Refmut` is analagous to \'Ref`but is returned…",null,null],[12,"refcell","","",19,null],[4,"BorrowStatus","","`BorrowStatus` represents the state of a `RefCell` at…",null,null],[13,"Not","","",20,null],[13,"Ref","","",20,null],[13,"MutRef","","",20,null],[11,"new","","",17,[[]]],[11,"borrow","","`borrow` takes just `&self` and returns a `Ref` to the…",17,[[],[["ref",3],["option",4]]]],[11,"borrow_mut","","`borrow_mut` takes just `&self` and returns a `RefMut` to…",17,[[],[["refmut",3],["option",4]]]],[11,"from","Elements_of_Programming_in_Rust::problem_4_1","",3,[[]]],[11,"into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","Elements_of_Programming_in_Rust::problem_8_1","",5,[[]]],[11,"into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","Elements_of_Programming_in_Rust::utils::binary_tree","",6,[[]]],[11,"into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"into_iter","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"to_owned","","",9,[[]]],[11,"clone_into","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"from","Elements_of_Programming_in_Rust::utils::linked_list::rclist","",10,[[]]],[11,"into","","",10,[[]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"from","","",11,[[]]],[11,"into","","",11,[[]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"from","","",12,[[]]],[11,"into","","",12,[[]]],[11,"into_iter","","",12,[[]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"from","","",13,[[]]],[11,"into","","",13,[[]]],[11,"into_iter","","",13,[[]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"from","Elements_of_Programming_in_Rust::utils::smart_pointers::cell","",14,[[]]],[11,"into","","",14,[[]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"try_into","","",14,[[],["result",4]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"from","Elements_of_Programming_in_Rust::utils::smart_pointers::rc","",15,[[]]],[11,"into","","",15,[[]]],[11,"borrow","","",15,[[]]],[11,"borrow_mut","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"try_into","","",15,[[],["result",4]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"from","","",16,[[]]],[11,"into","","",16,[[]]],[11,"to_owned","","",16,[[]]],[11,"clone_into","","",16,[[]]],[11,"borrow","","",16,[[]]],[11,"borrow_mut","","",16,[[]]],[11,"try_from","","",16,[[],["result",4]]],[11,"try_into","","",16,[[],["result",4]]],[11,"type_id","","",16,[[],["typeid",3]]],[11,"from","Elements_of_Programming_in_Rust::utils::smart_pointers::refcell","",17,[[]]],[11,"into","","",17,[[]]],[11,"borrow","","",17,[[]]],[11,"borrow_mut","","",17,[[]]],[11,"try_from","","",17,[[],["result",4]]],[11,"try_into","","",17,[[],["result",4]]],[11,"type_id","","",17,[[],["typeid",3]]],[11,"from","","",18,[[]]],[11,"into","","",18,[[]]],[11,"borrow","","",18,[[]]],[11,"borrow_mut","","",18,[[]]],[11,"try_from","","",18,[[],["result",4]]],[11,"try_into","","",18,[[],["result",4]]],[11,"type_id","","",18,[[],["typeid",3]]],[11,"from","","",19,[[]]],[11,"into","","",19,[[]]],[11,"borrow","","",19,[[]]],[11,"borrow_mut","","",19,[[]]],[11,"try_from","","",19,[[],["result",4]]],[11,"try_into","","",19,[[],["result",4]]],[11,"type_id","","",19,[[],["typeid",3]]],[11,"from","","",20,[[]]],[11,"into","","",20,[[]]],[11,"to_owned","","",20,[[]]],[11,"clone_into","","",20,[[]]],[11,"borrow","","",20,[[]]],[11,"borrow_mut","","",20,[[]]],[11,"try_from","","",20,[[],["result",4]]],[11,"try_into","","",20,[[],["result",4]]],[11,"type_id","","",20,[[],["typeid",3]]],[11,"parity","Elements_of_Programming_in_Rust::problem_4_1","",3,[[]]],[11,"parity","","",4,[[]]],[11,"parity","","",0,[[]]],[11,"parity","","",1,[[]]],[11,"drop","Elements_of_Programming_in_Rust::utils::linked_list::rclist","",10,[[]]],[11,"drop","Elements_of_Programming_in_Rust::utils::smart_pointers::rc","",16,[[]]],[11,"drop","Elements_of_Programming_in_Rust::utils::smart_pointers::refcell","",18,[[]]],[11,"drop","","",19,[[]]],[11,"from","Elements_of_Programming_in_Rust::utils::linked_list::rclist","",12,[[["list",3]],["iter",3]]],[11,"from","","",13,[[["list",3]],["itermut",3]]],[11,"next","Elements_of_Programming_in_Rust::utils::binary_tree","",8,[[],["option",4]]],[11,"next","Elements_of_Programming_in_Rust::utils::linked_list::rclist","",12,[[],["option",4]]],[11,"next","","",13,[[],["option",4]]],[11,"clone","Elements_of_Programming_in_Rust::utils::binary_tree","",9,[[],["noderelation",4]]],[11,"clone","Elements_of_Programming_in_Rust::utils::smart_pointers::rc","",16,[[]]],[11,"clone","Elements_of_Programming_in_Rust::utils::smart_pointers::refcell","",20,[[],["borrowstatus",4]]],[11,"deref","Elements_of_Programming_in_Rust::utils::smart_pointers::rc","",16,[[]]],[11,"deref","Elements_of_Programming_in_Rust::utils::smart_pointers::refcell","",18,[[]]],[11,"deref","","",19,[[]]],[11,"deref_mut","","",19,[[]]],[11,"fmt","Elements_of_Programming_in_Rust::problem_8_1","",5,[[["formatter",3]],["result",6]]],[11,"fmt","Elements_of_Programming_in_Rust::utils::binary_tree","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]]],"p":[[3,"Solution2"],[3,"Solution3"],[8,"Parity"],[3,"StringSolution"],[3,"Solution1"],[3,"MaxStack"],[3,"TreeNode"],[3,"BinaryTree"],[3,"InorderTraversal"],[4,"NodeRelation"],[3,"List"],[3,"Node"],[3,"Iter"],[3,"IterMut"],[3,"Cell"],[3,"RcInner"],[3,"Rc"],[3,"RefCell"],[3,"Ref"],[3,"RefMut"],[4,"BorrowStatus"]]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);