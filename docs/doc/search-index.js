var searchIndex = JSON.parse('{\
"Elements_of_Programming_in_Rust":{"doc":"","i":[[0,"problem_4_1","Elements_of_Programming_in_Rust","EoPI pg 24 The parity of a binary word is 1 if the number…",null,null],[3,"Solution1","Elements_of_Programming_in_Rust::problem_4_1","recursively compute the parity of right shifted subwords…",null,null],[3,"Solution2","","iteratively fold a word in half `XOR`\'ing all the way NO…",null,null],[12,"n_bits","","",0,null],[3,"Solution3","","iteratively fold a word in half `XOR`\'ing all the way YES…",null,null],[12,"n_bits","","K determins the maximum size of the hashmap e.g. u16 will…",1,null],[12,"map","","",1,null],[12,"_phantom","","",1,null],[12,"_helper","","",1,null],[5,"n_bits","","A helper function for getting the number of bits of a type…",null,[[]]],[8,"Parity","","Fundamental Trait we will be implementing in this problem.",null,null],[10,"parity","","",2,[[]]],[11,"new","","",3,[[]]],[11,"new","","",0,[[]]],[11,"new","","",1,[[]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"parity","","",3,[[]]],[11,"parity","","",0,[[]]],[11,"parity","","",1,[[]]]],"p":[[3,"Solution2"],[3,"Solution3"],[8,"Parity"],[3,"Solution1"]]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);